538/60
import yaml
x = 3
if type(x) == init: print('no')
if type(x) == int: print('no')
import psutil
import psutils
import psutil
psutil.cpu_stats()
dir(psutil)
psutil.boot_time()
import psutil
psutil.disk_partitions()
for i in psutil.disk_partitions():
   print(i)
for i in psutil.disk_partitions():
   print(i)
for i in psutil.disk_partitions():
   print(psutil.disk_usage(i.mountpoint))
for i in psutil.disk_partitions():
   print(psutil.disk_usage(i.mountpoint))
psutil.sensors_temperatures()
psutil.users(()
psutil.users()
for usr in psutil.users(): print(usr)
ls
e
exit()
x=100000
x*(x+1)*(2*x+1)
x*(x+1)*(2*x+1)/6
x=1000000
x*(x+1)*(2*x+1)/6
x=10000000
x*(x+1)*(2*x+1)/6
x=100000000
x*(x+1)*(2*x+1)/6
x=1000000000
x*(x+1)*(2*x+1)/6
x=10000000000
x*(x+1)*(2*x+1)/6
x*(x+1)*(2*x+1)/60
x=100000000000
x*(x+1)*(2*x+1)/60
x=100000000000000
x*(x+1)*(2*x+1)/6
x=100000000000000000000
x*(x+1)*(2*x+1)/6
x=1000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=100000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x=1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
x*(x+1)*(2*x+1)/6
x = ['da', 'aada']
x + 'da'
5*25*3/60
import json
with open('00128.info.json') as f: x = json.load(f)
x
exit()
from bs4 import BeautifulSoup as soup
filep = "'takeouts/Takeout/YouTube and YouTube Music/history/watch-history.html'"
filep
filep = 'takeouts/Takeout/YouTube and YouTube Music/history/watch-history.html'
c
l
from pathlib import Path
Path(filep)
x = Path(filep).read_text()
x
d = soup(x, 'lxml')
d = soup(x, 'html.parser')
d2 = soup(x, 'lxml')
from bs4 import BeautifulSoup as soup
d2 = soup(x, 'lxml')
from bs4 import BeautifulSoup as soup
filep = 'takeouts/Takeout/YouTube and YouTube Music/history/watch-history.html'
x = Path(filep).read_text()
from pathlib import Path
x = Path(filep).read_text()
x
d2 = soup(x, 'lxml')
d2
exit()
s = 3
s/3
s//3
s = 322.31
s/3
s//3
import flask_caching
from pathlib import Path
file = Path('./corpora/uploads/out.txt') 
file
file.exists()
file = Path('./corpora/uploads/out15.txt') 
file.exists()
file.stat
file.stat()
file.dir)_
file.__dir__()
file.stat()
file.stat().st_ctime
from datetime import datetime
ct = file.stat().st_ctime
datetime(ct)
datetime.fromtimestamp(ct)
datetime.fromtimestamp(ct).days
datetime.fromtimestamp(ct).day
datetime.fromtimestamp(ct).secons
datetime.fromtimestamp(ct).seconds
datetime.fromtimestamp(ct).sec
datetime.fromtimestamp(ct).__dir__()
datetime.fromtimestamp(ct).second
datetime.fromtimestamp(ct).min
datetime.fromtimestamp(ct)
datetime.fromtimestamp(ct) - datetime.now()
from pathlib import Path
file = Path('./corpora/uploads/out15.txt') 
ct = file.stat().st_ctime
file = Path('./out15.txt') 
ct = file.stat().st_ctime
datetime.fromtimestamp(ct) - datetime.now()
from datetime import datetime
datetime.fromtimestamp(ct) - datetime.now()
ct
import os, time
(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)
print("last modified: %s" % time.ctime(mtime))
(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)
print("last modified: %s" % time.ctime(mtime))
print("last modified: %s" % time.ctime(ctime))
ct = file.stat().st_ctime
6621//3
x = 591.28
x/60
import ranger
ranger
import ranger
ranger
SENTENCEDB = Database()
exit()
import os
os.getcwd()
import os
os.path.join("..", ".")
x = os.path.join("..", ".")
os.path.abspath(x)
os.path.abspath("..")
os.chdir("..")
os.getcwd()
os.chdir("-")
os.chdir("src")
os.getcwd()
from pathlib import Path
x = Path("src/server/img")
x
for i in x.iterdir(): print(i)
for i in x.iterdir(): print(i.name)
2560/1440
1920/1080
2998/1596
ls
help(app.run)
x = "c5,77,c5,5e,d9,11,01,a7,be,e8,81,f8,66,5c,ef,6e"
"".join(x.split(","))
"".join(x.split(",")).upper()
"".join(x.split(",")).upper().__len__()
exit()
3778000/3684000
348711/60
s=348711
import humanize
exit()
import humanize
s=348711
humanize.time(s)
from humanize.time import *
l
dir()
naturaltime(s)
naturalday(s)
naturaldelta(s)
precisedelta(s)
from humanize.time import precizedelta
from humanize.time import precisedelta
s=348711
precisedelta(s)
from humanize.time import precisedelta
s = 348711
precisedelta(s)
from humanize.time import precisedelta
s = 348711/8
precisedelta(s)
s = 1670
precisedelta(s)
from humanize.time import precisedelta
s = 1371
precisedelta(s)
from humanize.time import precisedelta
precisedelta(1241)
2000/60
33.3333/60
33.3333/60 * 2
0.6*60*60
0.7*60*60
3600/2000
s = 348711 * 1.9
from humanize.time import precisedelta
precisedelta(s)
from humanize.time import precisedelta
precisedelta(645)
from humanize.time import precisedelta
s = 348711
precisedelta(645)
precisedelta(s)
precisedelta(s-13590)
precisedelta(s-13690)
import hashlib
hashlib.algorithms_available
hashlib.algorithms_guaranteed
hashlib.algorithms_available - hashlib.algorithms_guaranteed
hashlib.algorithms_guaranteed
import math
math.gcd(64, 128)
import math
math.lcm(64, 128)
import math
math.lcm(64, 128)
math.lcm(64, 64)
import math
math.lcm(128, 72, 144, 64, 104, 168, 136)
math.lcm(128, 72, 144, 64, 104, 168, 136) / 128
math.lcm(128, 72, 144, 64, 104, 168, 136) * math.gcd(128, 72, 144, 64, 104, 168, 136)
math.gcd(128, 72, 144, 64, 104, 168, 136)
import math
math.lcm(128, 72, 144, 64, 104, 168, 136)
math.gcd(128, 72, 144, 64, 104, 168, 136)
math.lcm(128, 72, 144, 104, 168, 136)
math.gcd(128, 72, 144, 104, 168, 136)
math.gcd(128, 144, 104, 168, 136)
math.lcm(128, 144, 104, 168, 136)
[x/8 for x in [128, 144, 104, 168, 136]]
[x//8 for x in [128, 144, 104, 168, 136]]
math.lcm([x//8 for x in [128, 144, 104, 168, 136]])
math.lcm(*[x//8 for x in [128, 144, 104, 168, 136]])
math.lcm(*[x//8 for x in [128, 144, 104, 168, 136]]) * 8
math.lcm(128, 144, 104, 168, 136)
[x*128 for x in [128, 144, 104, 168, 136]]
[x*128 for x in [128, 144, 104, 168, 136, 64, 72]]
import math
math.max(128, 72, 144, 64, 104, 168, 136)
max
max(128, 72, 144, 64, 104, 168, 136)
max([128, 72, 144, 64, 104, 168, 136])
import math
math.lcm(128, 144, 104, 168, 136)
import humanize
humanize.filesize
humanize.filesize()
humanize.naturalsize(
)
import math
import humanize
x = math.lcm(128, 144, 104, 168, 136)
humanize.naturalsize(x)
humanize.naturalsize(x*128)
import hashlib
s = hashlib.shake_256()
s
s.update(b'bruh')
s
s.hexdigest()
help(s.hexdigest(
help(s.hexdigest)
len("c112b0d5b66255a1973f517396206ee4")
len("97ef30728e8f62660eac20ae7f63aa56384999bccac39a21b079c4fe8169d654")
from pprint import pprint
pprint(2, 23, 4)
pprint(2)
pprint(2, 23)
pprint([2, 23])
len(5d8d3695a5c33168d5d9ce59ac35097057417687df2cbd18bd26a19f0b60b97858062103bfb9c6b128c6d4a10803cb7e209456a81f466f02e5e07d563a3a345b)
len('5d8d3695a5c33168d5d9ce59ac35097057417687df2cbd18bd26a19f0b60b97858062103bfb9c6b128c6d4a10803cb7e209456a81f466f02e5e07d563a3a345b')
len('8008e5456a7c74638a38a13094281d776e6449185c9a0f0184e374dc3a66689da22244c91ca7ddffd2cf17b7f4c1a5cdc57fdb62545083a2f701cddfb214b300')
len('903772f56c73f3ee815a0b4efcf7fde8eac1086e3dd1342912d8246ab1bd97d4')
import hashlib
hashlib['new']
getattr(hashlib, 'new')
getattr(hashlib, 'sha')
getattr(hashlib, 'sha1')
import hashlib
hashlib.md4
import hashlib
hashlib.ripemd160
hashlib.new('ripemd160')
hashlib.ripemd160
import hashlib
hashlib.algorithms_available
